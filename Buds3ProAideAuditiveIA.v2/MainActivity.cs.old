using System;
using Android;
using Android.App;
using Android.Content;
using Android.Content.PM;
using Android.Graphics;
using Android.Media;
using Android.OS;
using Android.Runtime;
using Android.Views;
using Android.Widget;
using AndroidX.AppCompat.App;

namespace Buds3ProAideAuditiveIA.v2
{
    [Activity(
        Label = "@string/app_name",
        MainLauncher = true,
        Exported = true,
        Theme = "@style/Theme.Sonara.Dark",
        ConfigurationChanges = ConfigChanges.Orientation | ConfigChanges.ScreenSize
    )]
    public class MainActivity : AppCompatActivity, ILogSink
    {
        private const int ReqAudio = 0xB301;

        // ===== Audio =====
        private AudioEngine _engine;

        // ===== Top bar =====
        private Button _btnStart, _btnStop;

        // ===== Quick toggles (ligne simple) =====
        private Switch _swPassThrough, _swNoiseCancel;

        // ===== Calibrate =====
        private Button _btnCalibrate;
        private int _calibMs = 500; // slider dans le panneau NC

        // ===== Panels toggles =====
        private Button _btnNcToggle, _btnEqToggle, _btnQualityToggle, _btnRouteToggle;

        // ===== Panels =====
        private LinearLayout _ncPanel, _eqPanel, _qualityPanel, _routePanel;

        // --- NC panel widgets (réutilisés au démarrage)
        private Switch _swPlatformFx, _swDspNs, _swAmbient;
        // --- EQ panel widgets
        private Switch _swEq;
        // --- Quality panel widgets
        private Switch _swHP, _swClarity, _swDeEss, _swHum;

        // --- Routing widgets ---
        private RadioButton _rbA2dp, _rbSco, _rbLc3Auto;

        // ===== Graph =====
        private RealTimeChartView _chart;

        // ===== Logs & status =====
        private TextView _status, _latency;
        private Switch _swShowLogs;
        private LinearLayout _logCard;

        // ===== Route indicator =====
        private TextView _routeInfo;
        private Button _btnRebind;
        private AudioDeviceCallbackEx _deviceCallback;

        protected override void OnCreate(Bundle savedInstanceState)
        {
            base.OnCreate(savedInstanceState);

            _engine = new AudioEngine(this, this);

            // ===== Layout racine =====
            var root = new LinearLayout(this) { Orientation = Android.Widget.Orientation.Vertical };
            root.SetPadding(24, 24, 24, 24);
            root.SetBackgroundColor(Color.ParseColor("#121212"));

            // ===== Titre =====
            var title = new TextView(this)
            {
                Text = "Sonara — Hearing Assist",
                TextSize = 20f,
                Typeface = Typeface.DefaultBold
            };
            title.SetTextColor(new Color(0xE6, 0xE6, 0xE6));
            title.SetPadding(0, 0, 0, 16);
            root.AddView(title);

            // ===== Start / Stop =====
            var rowMain = new LinearLayout(this) { Orientation = Android.Widget.Orientation.Horizontal };
            rowMain.SetPadding(0, 0, 0, 16);
            if (Build.VERSION.SdkInt >= BuildVersionCodes.Lollipop) rowMain.Elevation = 12f;

            _btnStart = MakePrimary("START");
            _btnStop = MakePrimary("STOP");
            rowMain.AddView(_btnStart, new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.WrapContent, 1f));
            rowMain.AddView(_btnStop, new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.WrapContent, 1f));
            root.AddView(rowMain);

            // ===== Toggles rapides =====
            _swPassThrough = MakeSwitch("Pass-through", true);
            _swNoiseCancel = MakeSwitch("Noise Cancelling (DSP)", true);
            root.AddView(_swPassThrough);
            root.AddView(_swNoiseCancel);

            // ===== Calibrate =====
            _btnCalibrate = MakeSecondary("CALIBRATE");
            root.AddView(_btnCalibrate);

            // ===== Headers panneaux =====
            _btnRouteToggle = MakeSecondary("AUDIO ROUTING ▼");
            _btnNcToggle = MakeSecondary("NOISE CANCELLING ▼");
            _btnEqToggle = MakeSecondary("EQUALIZER");
            _btnQualityToggle = MakeSecondary("SPEECH QUALITY");
            root.AddView(_btnRouteToggle);
            root.AddView(_btnNcToggle);
            root.AddView(_btnEqToggle);
            root.AddView(_btnQualityToggle);

            // ===== Panneaux =====
            _routePanel = BuildRoutePanel();
            _ncPanel = BuildNoiseCancelPanel();
            _eqPanel = BuildEqPanel();
            _qualityPanel = BuildQualityPanel();

            _routePanel.Visibility = ViewStates.Gone;
            _ncPanel.Visibility = ViewStates.Gone;
            _eqPanel.Visibility = ViewStates.Gone;
            _qualityPanel.Visibility = ViewStates.Gone;

            root.AddView(_routePanel);
            root.AddView(_ncPanel);
            root.AddView(_eqPanel);
            root.AddView(_qualityPanel);

            // ===== Graph =====
            var graphCard = new LinearLayout(this) { Orientation = Android.Widget.Orientation.Vertical };
            graphCard.SetBackgroundColor(Color.ParseColor("#1E1E1E"));
            graphCard.SetPadding(16, 16, 16, 16);

            var graphTitle = new TextView(this) { Text = "Live Graph (RMS / Peak / GR)", TextSize = 14f };
            graphTitle.SetTextColor(new Color(0xE6, 0xE6, 0xE6));
            graphCard.AddView(graphTitle);

            _chart = new RealTimeChartView(this)
            {
                LayoutParameters = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MatchParent, 260)
            };
            graphCard.AddView(_chart);
            root.AddView(graphCard);

            // meters → graph
            _engine.SetMetersCallback((rmsDb, pkDb, grDb) =>
            {
                RunOnUiThread(() => _chart.Push(rmsDb, pkDb, grDb));
            });

            // ===== Latency + Route + Logs =====
            _latency = new TextView(this) { Text = "Latency: -- ms", TextSize = 12f };
            _latency.SetTextColor(new Color(0xB3, 0xB3, 0xB3));
            root.AddView(_latency);

            var routeRow = new LinearLayout(this) { Orientation = Android.Widget.Orientation.Horizontal };
            _routeInfo = new TextView(this) { Text = "Sortie: (unknown)", TextSize = 12f };
            _routeInfo.SetTextColor(new Color(0xB3, 0xB3, 0xB3));
            _btnRebind = MakeTertiary("Rebind");
            routeRow.AddView(_routeInfo, new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.WrapContent, 1f));
            routeRow.AddView(_btnRebind, new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WrapContent, ViewGroup.LayoutParams.WrapContent));
            root.AddView(routeRow);

            _swShowLogs = MakeSwitch("Show logs", false);
            root.AddView(_swShowLogs);

            _status = new TextView(this) { Text = "Ready.", TextSize = 12f };
            _status.SetPadding(12, 12, 12, 12);
            _status.SetTextColor(new Color(0xE6, 0xE6, 0xE6));

            _logCard = new LinearLayout(this) { Orientation = Android.Widget.Orientation.Vertical };
            _logCard.SetBackgroundColor(Color.ParseColor("#1E1E1E"));
            _logCard.SetPadding(12, 12, 12, 12);
            _logCard.AddView(_status);
            _logCard.Visibility = ViewStates.Gone;
            root.AddView(_logCard);

            // ===== Bottom bar =====
            var bottom = new LinearLayout(this) { Orientation = Android.Widget.Orientation.Horizontal };
            bottom.SetPadding(0, 24, 0, 0);
            var btnHelp = MakeTertiary("Help");
            var btnLogs = MakeTertiary("Logs");
            var btnReadme = MakeTertiary("README");
            bottom.AddView(btnHelp, new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.WrapContent, 1f));
            bottom.AddView(btnLogs, new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.WrapContent, 1f));
            bottom.AddView(btnReadme, new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.WrapContent, 1f));

            // ===== Scroll global =====
            var container = new LinearLayout(this) { Orientation = Android.Widget.Orientation.Vertical };
            container.AddView(root);
            container.AddView(bottom);

            var scroll = new ScrollView(this);
            scroll.AddView(container);
            SetContentView(scroll);

            // ===== Events =====
            _btnStart.Click += (s, e) => { try { StartService(new Intent(this, typeof(AudioForegroundService)).SetAction(AudioForegroundService.ACTION_START)); } catch {} StartAudioIfNeeded(startRequestedByUser: true); };
            _btnStop.Click += (s, e) => { _engine.Stop(); SetStatus("STOP ◼"); try { StartService(new Intent(this, typeof(AudioForegroundService)).SetAction(AudioForegroundService.ACTION_STOP)); } catch {} };

            _btnCalibrate.Click += (s, e) =>
            {
                bool wasRunning = _engine.IsRunning;
                if (!wasRunning) StartAudioIfNeeded(startRequestedByUser: false);
                _engine.CalibrateNoiseNow(_calibMs);
                SetStatus($"Calibrating noise ({_calibMs} ms)...");
            };

            _swPassThrough.CheckedChange += (s, e) =>
            {
                _engine.SetFlags(pass: e.IsChecked);
                SetStatus($"Pass-through: {(e.IsChecked ? "ON" : "OFF")}");
            };
            _swNoiseCancel.CheckedChange += (s, e) =>
            {
                _engine.SetFlags(dspNs: e.IsChecked);
                SetStatus($"Noise Cancelling: {(e.IsChecked ? "ON" : "OFF")}");
            };

            _swShowLogs.CheckedChange += (s, e) =>
                _logCard.Visibility = e.IsChecked ? ViewStates.Visible : ViewStates.Gone;

            _btnRouteToggle.Click += (s, e) => Toggle(_routePanel, _btnRouteToggle, "AUDIO ROUTING");
            _btnNcToggle.Click += (s, e) => Toggle(_ncPanel, _btnNcToggle, "NOISE CANCELLING");
            _btnEqToggle.Click += (s, e) => Toggle(_eqPanel, _btnEqToggle, "EQUALIZER");
            _btnQualityToggle.Click += (s, e) => Toggle(_qualityPanel, _btnQualityToggle, "SPEECH QUALITY");

            btnHelp.Click += (s, e) => StartActivity(new Intent(this, typeof(HelpActivity)));
            btnLogs.Click += (s, e) => StartActivity(new Intent(this, typeof(LogsActivity)));
            btnReadme.Click += (s, e) =>
            {
                try { StartActivity(new Intent(Intent.ActionView, Android.Net.Uri.Parse("https://github.com/Baal-1981/Buds3Pro-v1.2/blob/main/README.md"))); }
                catch { Toast.MakeText(this, "README URL not available", ToastLength.Short).Show(); }
            };

            _btnRebind.Click += (s, e) => RebindTransport();

            // device callback => MAJ route + tentative de reconnexion si profil change
            _deviceCallback = new AudioDeviceCallbackEx(UpdateRouteAndMaybeRebind);
            BluetoothRouting_Utilities.RegisterDeviceCallback(this, _deviceCallback);

            EnsureMicPermission();
            UpdateRouteLabel(); // init
        }

        protected override void OnDestroy()
        {
            base.OnDestroy();
            try { BluetoothRouting_Utilities.UnregisterDeviceCallback(this, _deviceCallback); } catch { }
        }

        // ===================== PANELS =====================
        private LinearLayout BuildRoutePanel()
        {
            var p = MakePanel();
            var lbl = new TextView(this) { Text = "Output transport:", TextSize = 13f };
            lbl.SetTextColor(new Color(0xE6,0xE6,0xE6));
            p.AddView(lbl);

            var rg = new RadioGroup(this) { Orientation = Android.Widget.Orientation.Vertical };

            _rbA2dp = new RadioButton(this) { Text = "A2DP / Media (Music stream)", Checked = true }; _rbA2dp.Id = View.GenerateViewId();
            _rbSco = new RadioButton(this) { Text = "SCO / HFP (Voice call stream)" }; _rbSco.Id = View.GenerateViewId();
            _rbLc3Auto = new RadioButton(this) { Text = "LE Audio (LC3) — auto (system decides)", Checked = false }; _rbLc3Auto.Id = View.GenerateViewId();

            rg.AddView(_rbA2dp);
            rg.AddView(_rbSco);
            rg.AddView(_rbLc3Auto);
            p.AddView(rg);

            rg.CheckedChange += (s, e) =>
            {
                var t = AudioTransport.A2DP;
                if (_rbSco.Checked) t = AudioTransport.SCO;
                else if (_rbLc3Auto.Checked) t = AudioTransport.LE_LC3_AUTO;
                _engine.SetTransport(t);
                SetStatus($"Transport: {t}");
                RebindTransport();
            };

            var hint = new TextView(this)
            {
                Text = "Note: LC3/LE Audio cannot be forced per-app. If your headset and Android support it, the system uses LC3 automatically when connected via LE Audio.",
                TextSize = 11f
            };
            hint.SetTextColor(new Color(0x8A, 0x8A, 0x8A));
            p.AddView(hint);

            return p;
        }

        private LinearLayout BuildNoiseCancelPanel()
        {
            var p = MakePanel();

            // 1) Effets natifs / DSP
            _swPlatformFx = MakeSwitch("Use platform NS/AGC/AEC (Android)", false);
            _swDspNs = MakeSwitch("Use DSP Noise Suppressor (spectral)", true);
            var helpPlat = new TextView(this) { Text = "Note: le switch Android active NS/AGC/AEC ensemble.", TextSize = 11f };
            helpPlat.SetTextColor(new Color(0x8A, 0x8A, 0x8A));

            // 2) Ambient expander (gate doux)
            _swAmbient = MakeSwitch("Ambient expander (duck background)", true);
            var sbDb = MakeSeekBar(-24, 0, -12, "Ambient reduction (dB): ", out var lblDb);
            var sbAtk = MakeSeekBar(50, 400, 200, "Attack (ms): ", out var lblAtk);
            var sbRel = MakeSeekBar(50, 300, 150, "Release (ms): ", out var lblRel);

            // 3) Durée de calibration
            var sbCal = MakeSeekBar(200, 2000, _calibMs, "Calibrate duration (ms): ", out var lblCal);

            p.AddView(_swPlatformFx);
            p.AddView(helpPlat);
            p.AddView(_swDspNs);

            p.AddView(_swAmbient);
            p.AddView(lblDb); p.AddView(sbDb);
            p.AddView(lblAtk); p.AddView(sbAtk);
            p.AddView(lblRel); p.AddView(sbRel);

            p.AddView(lblCal); p.AddView(sbCal);

            _swPlatformFx.CheckedChange += (s, e) => _engine.SetFlags(platformFx: e.IsChecked);
            _swDspNs.CheckedChange += (s, e) => _engine.SetFlags(dspNs: e.IsChecked);
            _swAmbient.CheckedChange += (s, e) => _engine.SetFlags(ambientExpander: e.IsChecked);

            sbDb.ProgressChanged += (s, e) => { if (!e.FromUser) return; _engine.SetAmbientReductionDb(-e.Progress); };
            sbAtk.ProgressChanged += (s, e) => { if (!e.FromUser) return; _engine.SetAmbientAttackMs(e.Progress); };
            sbRel.ProgressChanged += (s, e) => { if (!e.FromUser) return; _engine.SetAmbientReleaseMs(e.Progress); };
            sbCal.ProgressChanged += (s, e) => { if (!e.FromUser) return; _calibMs = e.Progress; };

            return p;
        }

        private LinearLayout BuildEqPanel()
        {
            var p = MakePanel();

            _swEq = MakeSwitch("Enable EQ (3 bands)", false);

            // gains
            var sbBassDb = MakeSeekBar(-12, +12, 0, "Bass (dB): ", out var lblBassDb);
            var sbMidDb = MakeSeekBar(-8, +8, 0, "Presence (dB): ", out var lblMidDb);
            var sbTreDb = MakeSeekBar(-12, +12, 0, "Treble (dB): ", out var lblTreDb);

            // fréquences
            var sbBassHz = MakeSeekBar(40, 400, 120, "Bass freq (Hz): ", out var lblBassHz);
            var sbMidHz = MakeSeekBar(1000, 3000, 2000, "Presence freq (Hz): ", out var lblMidHz);
            var sbTreHz = MakeSeekBar(2000, 10000, 6500, "Treble freq (Hz): ", out var lblTreHz);

            p.AddView(_swEq);
            p.AddView(lblBassDb); p.AddView(sbBassDb);
            p.AddView(lblMidDb); p.AddView(sbMidDb);
            p.AddView(lblTreDb); p.AddView(sbTreDb);

            p.AddView(lblBassHz); p.AddView(sbBassHz);
            p.AddView(lblMidHz); p.AddView(sbMidHz);
            p.AddView(lblTreHz); p.AddView(sbTreHz);

            _swEq.CheckedChange += (s, e) => _engine.SetEqEnabled(e.IsChecked);

            sbBassDb.ProgressChanged += (s, e) => { if (!e.FromUser) return; _engine.SetBassDb(e.Progress - 12); };
            sbMidDb.ProgressChanged += (s, e) => { if (!e.FromUser) return; _engine.SetPresenceDb(e.Progress - 8); };
            sbTreDb.ProgressChanged += (s, e) => { if (!e.FromUser) return; _engine.SetTrebleDb(e.Progress - 12); };

            sbBassHz.ProgressChanged += (s, e) => { if (!e.FromUser) return; _engine.SetBassFreqHz(e.Progress); };
            sbMidHz.ProgressChanged += (s, e) => { if (!e.FromUser) return; _engine.SetPresenceHz(e.Progress); };
            sbTreHz.ProgressChanged += (s, e) => { if (!e.FromUser) return; _engine.SetTrebleFreqHz(e.Progress); };

            return p;
        }

        private LinearLayout BuildQualityPanel()
        {
            var p = MakePanel();

            _swHP = MakeSwitch("High-pass (≈120 Hz)", true);
            _swClarity = MakeSwitch("Clarity boost", true);
            _swDeEss = MakeSwitch("De-esser", false);
            _swHum = MakeSwitch("Hum remover (50/60 Hz)", false);

            // Pré-gain global
            var sbGain = MakeSeekBar(0, 36, 0, "Pre-gain (dB): ", out var lblGain);

            // Choix base 50 / 60 Hz (uniquement si activé)
            var humRow = new LinearLayout(this) { Orientation = Android.Widget.Orientation.Horizontal };
            var rb50 = new RadioButton(this) { Text = "50 Hz", Checked = true }; rb50.Id = View.GenerateViewId();
            var rb60 = new RadioButton(this) { Text = "60 Hz" }; rb60.Id = View.GenerateViewId();
            var rg = new RadioGroup(this) { Orientation = Android.Widget.Orientation.Horizontal };
            rg.AddView(rb50); rg.AddView(rb60);
            humRow.AddView(rg);

            p.AddView(_swHP);
            p.AddView(_swClarity);
            p.AddView(_swDeEss);
            p.AddView(_swHum);
            p.AddView(lblGain); p.AddView(sbGain);
            p.AddView(humRow);

            _swHP.CheckedChange += (s, e) => _engine.SetFlags(hp: e.IsChecked);
            _swClarity.CheckedChange += (s, e) => _engine.SetClarity(e.IsChecked);
            _swDeEss.CheckedChange += (s, e) => _engine.SetDeEsserEnabled(e.IsChecked);
            _swHum.CheckedChange += (s, e) => _engine.SetHumEnabled(e.IsChecked);

            sbGain.ProgressChanged += (s, e) => { if (!e.FromUser) return; _engine.SetGainDb(e.Progress); };

            rg.CheckedChange += (s, e) =>
            {
                var hz = (e.CheckedId == rb60.Id) ? 60 : 50;
                _engine.SetHumBaseHz(hz);
            };

            return p;
        }

        // ===================== Start / Permission =====================
        private void StartAudioIfNeeded(bool startRequestedByUser)
        {
            if (CheckSelfPermission(Manifest.Permission.RecordAudio) != Permission.Granted)
            {
                RequestPermissions(new[] { Manifest.Permission.RecordAudio }, ReqAudio);
                return;
            }
            if (_engine.IsRunning)
            {
                if (startRequestedByUser) SetStatus("Déjà en cours.");
                return;
            }

            // Configure à partir des switches courants
            bool pass = _swPassThrough?.Checked ?? true;
            bool dspNs = _swNoiseCancel?.Checked ?? true;
            bool plat = _swPlatformFx?.Checked ?? false;
            bool hp = _swHP?.Checked ?? true;
            bool clar = _swClarity?.Checked ?? true;
            bool eq = _swEq?.Checked ?? false;

            _engine.Configure(48000, 10, pass, dspNs, plat, hp, clar, eq);

            var ok = _engine.Start();
            SetStatus(ok ? "RUN ▶ Audio démarré" : "Start FAILED");
            try { _latency.Text = $"Latency: {_engine.TransportLatencyMs} ms • Route: " + BluetoothRouting_Utilities.GetActiveRouteInfo(this); } catch { }
            LogUtilities.LogLatency(this, _engine.TransportLatencyMs, _engine.AlgoLatencyMs);
            UpdateRouteLabel();
        }

        private void EnsureMicPermission()
        {
            if (CheckSelfPermission(Manifest.Permission.RecordAudio) != Permission.Granted)
                RequestPermissions(new[] { Manifest.Permission.RecordAudio }, ReqAudio);
        }

        public override void OnRequestPermissionsResult(int requestCode, string[] permissions, [GeneratedEnum] Permission[] grantResults)
        {
            base.OnRequestPermissionsResult(requestCode, permissions, grantResults);
            if (requestCode == ReqAudio && grantResults.Length > 0 && grantResults[0] == Permission.Granted)
                StartAudioIfNeeded(startRequestedByUser: true);
        }

        // ===================== Route helpers =====================
        private void UpdateRouteLabel()
        {
            try
            {
                var info = BluetoothRouting_Utilities.GetActiveRouteInfo(this);
                _routeInfo.Text = "Sortie: " + info;
                try { _latency.Text = $"Latency: {_engine.TransportLatencyMs} ms • Route: {info}"; } catch { }
                LogUtilities.Log(this, "ROUTE", info);
            }
            catch
            {
                _routeInfo.Text = "Sortie: (unknown)";
                try { _latency.Text = $"Latency: {_engine.TransportLatencyMs} ms • Route: (unknown)"; } catch { }
            }
        }

        private void RebindTransport()
        {
            // Redémarre proprement pour appliquer la route choisie
            bool wasRunning = _engine.IsRunning;
            if (wasRunning) _engine.Stop();
            StartAudioIfNeeded(startRequestedByUser: false);
            UpdateRouteLabel();
        }

        private void UpdateRouteAndMaybeRebind()
        {
            RunOnUiThread(() =>
            {
                var before = _routeInfo.Text;
                UpdateRouteLabel();

                // Si on était en SCO et qu'on a perdu SCO -> réessayer
                if (_rbSco != null && _rbSco.Checked && !BluetoothRouting_Utilities.IsScoOn(this))
                {
                    // tentative de reconnexion légère
                    BluetoothRouting_Utilities.EnsureSco(this, 1500);
                    UpdateRouteLabel();
                }

                // Si profil (LE/A2DP) a changé pendant le run, on relance rapidement
                if (_engine.IsRunning && before != _routeInfo.Text)
                {
                    // petit rebond pour réaligner l'AudioTrack/Record si nécessaire
                    RebindTransport();
                }
            });
        }

        // ===================== UI helpers =====================
        private void Toggle(LinearLayout panel, Button header, string baseLabel)
        {
            bool show = panel.Visibility != ViewStates.Visible;
            panel.Visibility = show ? ViewStates.Visible : ViewStates.Gone;
            header.Text = show ? $"{baseLabel} ▲" : $"{baseLabel} ▼";
        }

        private LinearLayout MakePanel()
        {
            var p = new LinearLayout(this) { Orientation = Android.Widget.Orientation.Vertical };
            p.SetBackgroundColor(Color.ParseColor("#1E1E1E"));
            p.SetPadding(16, 16, 16, 16);
            return p;
        }

        private Button MakePrimary(string text)
        {
            var b = new Button(this) { Text = text };
            b.SetPadding(24, 20, 24, 20);
            b.SetBackgroundColor(Color.ParseColor("#2962FF"));
            b.SetTextColor(Color.White);
            return b;
        }

        private Button MakeSecondary(string text)
        {
            var b = new Button(this) { Text = text };
            b.SetPadding(20, 16, 20, 16);
            b.SetBackgroundColor(Color.ParseColor("#263238"));
            b.SetTextColor(new Color(0xE6, 0xE6, 0xE6));
            return b;
        }

        private Button MakeTertiary(string text)
        {
            var b = new Button(this) { Text = text };
            b.SetPadding(16, 12, 16, 12);
            b.SetBackgroundColor(Color.Transparent);
            b.SetTextColor(new Color(0xB3, 0xB3, 0xB3));
            return b;
        }

        private Switch MakeSwitch(string label, bool def)
        {
            var s = new Switch(this) { Text = label, Checked = def };
            s.SetTextColor(new Color(0xE6, 0xE6, 0xE6));
            return s;
        }

        private SeekBar MakeSeekBar(int min, int max, int def, string labelPrefix, out TextView label)
        {
            // Swap propre (IDE0180)
            if (min > max) (min, max) = (max, min);

            // Range sûr (évite Max=0) + clamp de la valeur par défaut
            int range = max - min;
            if (range <= 0) range = 1;
            def = (def < min) ? min : (def > max) ? max : def;

            // Init simplifiée (IDE0017)
            var sb = new SeekBar(this) { Max = range, Progress = def - min };

            label = new TextView(this) { Text = $"{labelPrefix}{def}", TextSize = 12f };
            label.SetTextColor(new Color(0xB3, 0xB3, 0xB3));

            // Ne pas capturer le paramètre 'out' dans la lambda
            var labelLocal = label;

            sb.ProgressChanged += (s, e) =>
            {
                if (!e.FromUser) return;
                var value = e.Progress + min;
                labelLocal.Text = $"{labelPrefix}{value}";
            };

            return sb;
        }


        private void SetStatus(string s)
        {
            try { _status.Text = s; } catch { }
        }

        public void Log(string msg)
        {
            RunOnUiThread(() =>
            {
                try
                {
                    _status.Text = msg;
                    LogUtilities.Log(this, "APP", msg);
                }
                catch { }
            });
        }

        // ===== local device callback helper =====
        private sealed class AudioDeviceCallbackEx : AudioDeviceCallback
        {
            private readonly Action _onChanged;
            public AudioDeviceCallbackEx(Action onChanged) { _onChanged = onChanged; }
            public override void OnAudioDevicesAdded(AudioDeviceInfo[] addedDevices) => _onChanged?.Invoke();
            public override void OnAudioDevicesRemoved(AudioDeviceInfo[] removedDevices) => _onChanged?.Invoke();
        }
    }
}
